/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 117.0, "minX": 0.0, "maxY": 84200.0, "series": [{"data": [[0.0, 117.0], [0.1, 118.0], [0.2, 118.0], [0.3, 118.0], [0.4, 118.0], [0.5, 118.0], [0.6, 118.0], [0.7, 118.0], [0.8, 119.0], [0.9, 119.0], [1.0, 119.0], [1.1, 119.0], [1.2, 119.0], [1.3, 119.0], [1.4, 119.0], [1.5, 119.0], [1.6, 119.0], [1.7, 119.0], [1.8, 119.0], [1.9, 119.0], [2.0, 119.0], [2.1, 119.0], [2.2, 119.0], [2.3, 119.0], [2.4, 119.0], [2.5, 119.0], [2.6, 119.0], [2.7, 119.0], [2.8, 119.0], [2.9, 119.0], [3.0, 119.0], [3.1, 119.0], [3.2, 119.0], [3.3, 119.0], [3.4, 119.0], [3.5, 119.0], [3.6, 119.0], [3.7, 119.0], [3.8, 119.0], [3.9, 119.0], [4.0, 119.0], [4.1, 119.0], [4.2, 119.0], [4.3, 119.0], [4.4, 119.0], [4.5, 119.0], [4.6, 119.0], [4.7, 119.0], [4.8, 119.0], [4.9, 119.0], [5.0, 119.0], [5.1, 119.0], [5.2, 119.0], [5.3, 119.0], [5.4, 119.0], [5.5, 119.0], [5.6, 119.0], [5.7, 119.0], [5.8, 119.0], [5.9, 119.0], [6.0, 119.0], [6.1, 119.0], [6.2, 119.0], [6.3, 119.0], [6.4, 119.0], [6.5, 119.0], [6.6, 119.0], [6.7, 119.0], [6.8, 119.0], [6.9, 119.0], [7.0, 119.0], [7.1, 119.0], [7.2, 119.0], [7.3, 119.0], [7.4, 119.0], [7.5, 119.0], [7.6, 119.0], [7.7, 119.0], [7.8, 119.0], [7.9, 119.0], [8.0, 119.0], [8.1, 119.0], [8.2, 119.0], [8.3, 119.0], [8.4, 119.0], [8.5, 119.0], [8.6, 119.0], [8.7, 119.0], [8.8, 119.0], [8.9, 119.0], [9.0, 119.0], [9.1, 119.0], [9.2, 119.0], [9.3, 119.0], [9.4, 119.0], [9.5, 119.0], [9.6, 119.0], [9.7, 119.0], [9.8, 119.0], [9.9, 119.0], [10.0, 119.0], [10.1, 120.0], [10.2, 120.0], [10.3, 120.0], [10.4, 120.0], [10.5, 120.0], [10.6, 120.0], [10.7, 120.0], [10.8, 120.0], [10.9, 120.0], [11.0, 120.0], [11.1, 120.0], [11.2, 120.0], [11.3, 120.0], [11.4, 120.0], [11.5, 120.0], [11.6, 120.0], [11.7, 120.0], [11.8, 120.0], [11.9, 120.0], [12.0, 120.0], [12.1, 120.0], [12.2, 120.0], [12.3, 120.0], [12.4, 120.0], [12.5, 120.0], [12.6, 120.0], [12.7, 120.0], [12.8, 120.0], [12.9, 120.0], [13.0, 120.0], [13.1, 120.0], [13.2, 120.0], [13.3, 120.0], [13.4, 120.0], [13.5, 120.0], [13.6, 120.0], [13.7, 120.0], [13.8, 120.0], [13.9, 120.0], [14.0, 120.0], [14.1, 120.0], [14.2, 120.0], [14.3, 120.0], [14.4, 120.0], [14.5, 120.0], [14.6, 120.0], [14.7, 120.0], [14.8, 120.0], [14.9, 120.0], [15.0, 120.0], [15.1, 120.0], [15.2, 120.0], [15.3, 120.0], [15.4, 120.0], [15.5, 120.0], [15.6, 120.0], [15.7, 120.0], [15.8, 120.0], [15.9, 120.0], [16.0, 120.0], [16.1, 120.0], [16.2, 120.0], [16.3, 120.0], [16.4, 120.0], [16.5, 120.0], [16.6, 120.0], [16.7, 120.0], [16.8, 120.0], [16.9, 120.0], [17.0, 120.0], [17.1, 120.0], [17.2, 120.0], [17.3, 120.0], [17.4, 120.0], [17.5, 120.0], [17.6, 120.0], [17.7, 120.0], [17.8, 120.0], [17.9, 120.0], [18.0, 120.0], [18.1, 120.0], [18.2, 120.0], [18.3, 120.0], [18.4, 120.0], [18.5, 120.0], [18.6, 120.0], [18.7, 120.0], [18.8, 120.0], [18.9, 120.0], [19.0, 120.0], [19.1, 120.0], [19.2, 120.0], [19.3, 120.0], [19.4, 120.0], [19.5, 120.0], [19.6, 120.0], [19.7, 120.0], [19.8, 120.0], [19.9, 120.0], [20.0, 120.0], [20.1, 120.0], [20.2, 120.0], [20.3, 120.0], [20.4, 120.0], [20.5, 120.0], [20.6, 120.0], [20.7, 120.0], [20.8, 120.0], [20.9, 120.0], [21.0, 120.0], [21.1, 120.0], [21.2, 120.0], [21.3, 120.0], [21.4, 120.0], [21.5, 120.0], [21.6, 120.0], [21.7, 120.0], [21.8, 120.0], [21.9, 120.0], [22.0, 120.0], [22.1, 120.0], [22.2, 120.0], [22.3, 120.0], [22.4, 120.0], [22.5, 120.0], [22.6, 121.0], [22.7, 121.0], [22.8, 121.0], [22.9, 121.0], [23.0, 121.0], [23.1, 121.0], [23.2, 121.0], [23.3, 121.0], [23.4, 121.0], [23.5, 121.0], [23.6, 121.0], [23.7, 121.0], [23.8, 121.0], [23.9, 121.0], [24.0, 121.0], [24.1, 121.0], [24.2, 121.0], [24.3, 121.0], [24.4, 121.0], [24.5, 121.0], [24.6, 121.0], [24.7, 121.0], [24.8, 121.0], [24.9, 121.0], [25.0, 121.0], [25.1, 121.0], [25.2, 121.0], [25.3, 121.0], [25.4, 121.0], [25.5, 121.0], [25.6, 121.0], [25.7, 121.0], [25.8, 121.0], [25.9, 121.0], [26.0, 121.0], [26.1, 121.0], [26.2, 121.0], [26.3, 121.0], [26.4, 121.0], [26.5, 121.0], [26.6, 121.0], [26.7, 121.0], [26.8, 121.0], [26.9, 121.0], [27.0, 121.0], [27.1, 121.0], [27.2, 121.0], [27.3, 121.0], [27.4, 121.0], [27.5, 121.0], [27.6, 121.0], [27.7, 121.0], [27.8, 121.0], [27.9, 121.0], [28.0, 121.0], [28.1, 121.0], [28.2, 121.0], [28.3, 121.0], [28.4, 121.0], [28.5, 121.0], [28.6, 121.0], [28.7, 121.0], [28.8, 121.0], [28.9, 121.0], [29.0, 121.0], [29.1, 121.0], [29.2, 121.0], [29.3, 121.0], [29.4, 121.0], [29.5, 121.0], [29.6, 121.0], [29.7, 121.0], [29.8, 121.0], [29.9, 121.0], [30.0, 121.0], [30.1, 121.0], [30.2, 121.0], [30.3, 121.0], [30.4, 121.0], [30.5, 121.0], [30.6, 121.0], [30.7, 121.0], [30.8, 121.0], [30.9, 121.0], [31.0, 121.0], [31.1, 121.0], [31.2, 121.0], [31.3, 121.0], [31.4, 121.0], [31.5, 121.0], [31.6, 121.0], [31.7, 122.0], [31.8, 122.0], [31.9, 122.0], [32.0, 122.0], [32.1, 122.0], [32.2, 122.0], [32.3, 122.0], [32.4, 122.0], [32.5, 122.0], [32.6, 122.0], [32.7, 122.0], [32.8, 122.0], [32.9, 122.0], [33.0, 122.0], [33.1, 122.0], [33.2, 122.0], [33.3, 122.0], [33.4, 122.0], [33.5, 122.0], [33.6, 122.0], [33.7, 122.0], [33.8, 122.0], [33.9, 122.0], [34.0, 122.0], [34.1, 122.0], [34.2, 122.0], [34.3, 122.0], [34.4, 122.0], [34.5, 122.0], [34.6, 122.0], [34.7, 122.0], [34.8, 122.0], [34.9, 122.0], [35.0, 122.0], [35.1, 122.0], [35.2, 122.0], [35.3, 122.0], [35.4, 122.0], [35.5, 122.0], [35.6, 122.0], [35.7, 122.0], [35.8, 122.0], [35.9, 122.0], [36.0, 122.0], [36.1, 122.0], [36.2, 122.0], [36.3, 122.0], [36.4, 122.0], [36.5, 122.0], [36.6, 122.0], [36.7, 122.0], [36.8, 122.0], [36.9, 122.0], [37.0, 122.0], [37.1, 122.0], [37.2, 122.0], [37.3, 122.0], [37.4, 122.0], [37.5, 122.0], [37.6, 122.0], [37.7, 122.0], [37.8, 122.0], [37.9, 122.0], [38.0, 122.0], [38.1, 122.0], [38.2, 122.0], [38.3, 122.0], [38.4, 122.0], [38.5, 122.0], [38.6, 122.0], [38.7, 122.0], [38.8, 122.0], [38.9, 122.0], [39.0, 122.0], [39.1, 122.0], [39.2, 122.0], [39.3, 122.0], [39.4, 122.0], [39.5, 122.0], [39.6, 122.0], [39.7, 123.0], [39.8, 123.0], [39.9, 123.0], [40.0, 123.0], [40.1, 123.0], [40.2, 123.0], [40.3, 123.0], [40.4, 123.0], [40.5, 123.0], [40.6, 123.0], [40.7, 123.0], [40.8, 123.0], [40.9, 123.0], [41.0, 123.0], [41.1, 123.0], [41.2, 123.0], [41.3, 123.0], [41.4, 123.0], [41.5, 123.0], [41.6, 123.0], [41.7, 123.0], [41.8, 123.0], [41.9, 123.0], [42.0, 123.0], [42.1, 123.0], [42.2, 123.0], [42.3, 123.0], [42.4, 123.0], [42.5, 123.0], [42.6, 123.0], [42.7, 123.0], [42.8, 123.0], [42.9, 123.0], [43.0, 123.0], [43.1, 123.0], [43.2, 123.0], [43.3, 123.0], [43.4, 123.0], [43.5, 123.0], [43.6, 123.0], [43.7, 123.0], [43.8, 123.0], [43.9, 123.0], [44.0, 123.0], [44.1, 123.0], [44.2, 123.0], [44.3, 123.0], [44.4, 123.0], [44.5, 123.0], [44.6, 123.0], [44.7, 123.0], [44.8, 123.0], [44.9, 123.0], [45.0, 123.0], [45.1, 123.0], [45.2, 123.0], [45.3, 123.0], [45.4, 123.0], [45.5, 123.0], [45.6, 123.0], [45.7, 124.0], [45.8, 124.0], [45.9, 124.0], [46.0, 124.0], [46.1, 124.0], [46.2, 124.0], [46.3, 124.0], [46.4, 124.0], [46.5, 124.0], [46.6, 124.0], [46.7, 124.0], [46.8, 124.0], [46.9, 124.0], [47.0, 124.0], [47.1, 124.0], [47.2, 124.0], [47.3, 124.0], [47.4, 124.0], [47.5, 124.0], [47.6, 124.0], [47.7, 124.0], [47.8, 124.0], [47.9, 124.0], [48.0, 124.0], [48.1, 124.0], [48.2, 124.0], [48.3, 124.0], [48.4, 124.0], [48.5, 124.0], [48.6, 124.0], [48.7, 124.0], [48.8, 124.0], [48.9, 124.0], [49.0, 124.0], [49.1, 124.0], [49.2, 124.0], [49.3, 124.0], [49.4, 124.0], [49.5, 124.0], [49.6, 124.0], [49.7, 124.0], [49.8, 124.0], [49.9, 125.0], [50.0, 125.0], [50.1, 125.0], [50.2, 125.0], [50.3, 125.0], [50.4, 125.0], [50.5, 125.0], [50.6, 125.0], [50.7, 125.0], [50.8, 125.0], [50.9, 125.0], [51.0, 125.0], [51.1, 125.0], [51.2, 125.0], [51.3, 125.0], [51.4, 125.0], [51.5, 125.0], [51.6, 125.0], [51.7, 125.0], [51.8, 125.0], [51.9, 125.0], [52.0, 125.0], [52.1, 125.0], [52.2, 125.0], [52.3, 125.0], [52.4, 125.0], [52.5, 125.0], [52.6, 125.0], [52.7, 125.0], [52.8, 125.0], [52.9, 125.0], [53.0, 125.0], [53.1, 125.0], [53.2, 125.0], [53.3, 125.0], [53.4, 126.0], [53.5, 126.0], [53.6, 126.0], [53.7, 126.0], [53.8, 126.0], [53.9, 126.0], [54.0, 126.0], [54.1, 126.0], [54.2, 126.0], [54.3, 126.0], [54.4, 126.0], [54.5, 126.0], [54.6, 126.0], [54.7, 126.0], [54.8, 126.0], [54.9, 126.0], [55.0, 126.0], [55.1, 126.0], [55.2, 126.0], [55.3, 126.0], [55.4, 126.0], [55.5, 126.0], [55.6, 126.0], [55.7, 126.0], [55.8, 126.0], [55.9, 126.0], [56.0, 126.0], [56.1, 126.0], [56.2, 127.0], [56.3, 127.0], [56.4, 127.0], [56.5, 127.0], [56.6, 127.0], [56.7, 127.0], [56.8, 127.0], [56.9, 127.0], [57.0, 127.0], [57.1, 127.0], [57.2, 127.0], [57.3, 127.0], [57.4, 127.0], [57.5, 127.0], [57.6, 127.0], [57.7, 127.0], [57.8, 127.0], [57.9, 127.0], [58.0, 127.0], [58.1, 127.0], [58.2, 127.0], [58.3, 127.0], [58.4, 127.0], [58.5, 127.0], [58.6, 127.0], [58.7, 128.0], [58.8, 128.0], [58.9, 128.0], [59.0, 128.0], [59.1, 128.0], [59.2, 128.0], [59.3, 128.0], [59.4, 128.0], [59.5, 128.0], [59.6, 128.0], [59.7, 128.0], [59.8, 128.0], [59.9, 128.0], [60.0, 128.0], [60.1, 128.0], [60.2, 128.0], [60.3, 128.0], [60.4, 128.0], [60.5, 128.0], [60.6, 128.0], [60.7, 128.0], [60.8, 129.0], [60.9, 129.0], [61.0, 129.0], [61.1, 129.0], [61.2, 129.0], [61.3, 129.0], [61.4, 129.0], [61.5, 129.0], [61.6, 129.0], [61.7, 129.0], [61.8, 129.0], [61.9, 129.0], [62.0, 129.0], [62.1, 129.0], [62.2, 129.0], [62.3, 129.0], [62.4, 129.0], [62.5, 129.0], [62.6, 129.0], [62.7, 130.0], [62.8, 130.0], [62.9, 130.0], [63.0, 130.0], [63.1, 130.0], [63.2, 130.0], [63.3, 130.0], [63.4, 130.0], [63.5, 130.0], [63.6, 130.0], [63.7, 130.0], [63.8, 130.0], [63.9, 130.0], [64.0, 130.0], [64.1, 130.0], [64.2, 130.0], [64.3, 131.0], [64.4, 131.0], [64.5, 131.0], [64.6, 131.0], [64.7, 131.0], [64.8, 131.0], [64.9, 131.0], [65.0, 131.0], [65.1, 131.0], [65.2, 131.0], [65.3, 131.0], [65.4, 131.0], [65.5, 131.0], [65.6, 131.0], [65.7, 131.0], [65.8, 131.0], [65.9, 132.0], [66.0, 132.0], [66.1, 132.0], [66.2, 132.0], [66.3, 132.0], [66.4, 132.0], [66.5, 132.0], [66.6, 132.0], [66.7, 132.0], [66.8, 132.0], [66.9, 132.0], [67.0, 132.0], [67.1, 132.0], [67.2, 132.0], [67.3, 133.0], [67.4, 133.0], [67.5, 133.0], [67.6, 133.0], [67.7, 133.0], [67.8, 133.0], [67.9, 133.0], [68.0, 133.0], [68.1, 133.0], [68.2, 133.0], [68.3, 133.0], [68.4, 133.0], [68.5, 133.0], [68.6, 133.0], [68.7, 134.0], [68.8, 134.0], [68.9, 134.0], [69.0, 134.0], [69.1, 134.0], [69.2, 134.0], [69.3, 134.0], [69.4, 134.0], [69.5, 134.0], [69.6, 134.0], [69.7, 134.0], [69.8, 134.0], [69.9, 134.0], [70.0, 135.0], [70.1, 135.0], [70.2, 135.0], [70.3, 135.0], [70.4, 135.0], [70.5, 135.0], [70.6, 135.0], [70.7, 135.0], [70.8, 135.0], [70.9, 135.0], [71.0, 135.0], [71.1, 135.0], [71.2, 136.0], [71.3, 136.0], [71.4, 136.0], [71.5, 136.0], [71.6, 136.0], [71.7, 136.0], [71.8, 136.0], [71.9, 136.0], [72.0, 136.0], [72.1, 136.0], [72.2, 136.0], [72.3, 136.0], [72.4, 137.0], [72.5, 137.0], [72.6, 137.0], [72.7, 137.0], [72.8, 137.0], [72.9, 137.0], [73.0, 137.0], [73.1, 137.0], [73.2, 137.0], [73.3, 137.0], [73.4, 138.0], [73.5, 138.0], [73.6, 138.0], [73.7, 138.0], [73.8, 138.0], [73.9, 138.0], [74.0, 138.0], [74.1, 138.0], [74.2, 138.0], [74.3, 139.0], [74.4, 139.0], [74.5, 139.0], [74.6, 139.0], [74.7, 139.0], [74.8, 139.0], [74.9, 139.0], [75.0, 139.0], [75.1, 140.0], [75.2, 140.0], [75.3, 140.0], [75.4, 140.0], [75.5, 140.0], [75.6, 140.0], [75.7, 140.0], [75.8, 141.0], [75.9, 141.0], [76.0, 141.0], [76.1, 141.0], [76.2, 141.0], [76.3, 141.0], [76.4, 142.0], [76.5, 142.0], [76.6, 142.0], [76.7, 142.0], [76.8, 142.0], [76.9, 143.0], [77.0, 143.0], [77.1, 143.0], [77.2, 143.0], [77.3, 143.0], [77.4, 144.0], [77.5, 144.0], [77.6, 144.0], [77.7, 144.0], [77.8, 144.0], [77.9, 145.0], [78.0, 145.0], [78.1, 145.0], [78.2, 145.0], [78.3, 146.0], [78.4, 146.0], [78.5, 146.0], [78.6, 147.0], [78.7, 147.0], [78.8, 147.0], [78.9, 148.0], [79.0, 148.0], [79.1, 148.0], [79.2, 148.0], [79.3, 149.0], [79.4, 149.0], [79.5, 150.0], [79.6, 150.0], [79.7, 150.0], [79.8, 151.0], [79.9, 151.0], [80.0, 152.0], [80.1, 152.0], [80.2, 152.0], [80.3, 153.0], [80.4, 153.0], [80.5, 154.0], [80.6, 154.0], [80.7, 155.0], [80.8, 155.0], [80.9, 156.0], [81.0, 156.0], [81.1, 156.0], [81.2, 157.0], [81.3, 157.0], [81.4, 157.0], [81.5, 158.0], [81.6, 158.0], [81.7, 158.0], [81.8, 159.0], [81.9, 159.0], [82.0, 159.0], [82.1, 160.0], [82.2, 160.0], [82.3, 160.0], [82.4, 160.0], [82.5, 160.0], [82.6, 161.0], [82.7, 161.0], [82.8, 161.0], [82.9, 161.0], [83.0, 162.0], [83.1, 162.0], [83.2, 162.0], [83.3, 162.0], [83.4, 162.0], [83.5, 163.0], [83.6, 163.0], [83.7, 163.0], [83.8, 163.0], [83.9, 163.0], [84.0, 163.0], [84.1, 164.0], [84.2, 164.0], [84.3, 164.0], [84.4, 164.0], [84.5, 164.0], [84.6, 164.0], [84.7, 165.0], [84.8, 165.0], [84.9, 165.0], [85.0, 165.0], [85.1, 166.0], [85.2, 166.0], [85.3, 166.0], [85.4, 166.0], [85.5, 167.0], [85.6, 167.0], [85.7, 167.0], [85.8, 167.0], [85.9, 168.0], [86.0, 168.0], [86.1, 169.0], [86.2, 169.0], [86.3, 170.0], [86.4, 170.0], [86.5, 171.0], [86.6, 171.0], [86.7, 172.0], [86.8, 173.0], [86.9, 173.0], [87.0, 174.0], [87.1, 175.0], [87.2, 176.0], [87.3, 177.0], [87.4, 177.0], [87.5, 178.0], [87.6, 179.0], [87.7, 180.0], [87.8, 181.0], [87.9, 182.0], [88.0, 183.0], [88.1, 183.0], [88.2, 184.0], [88.3, 185.0], [88.4, 186.0], [88.5, 187.0], [88.6, 187.0], [88.7, 188.0], [88.8, 189.0], [88.9, 189.0], [89.0, 190.0], [89.1, 190.0], [89.2, 191.0], [89.3, 191.0], [89.4, 192.0], [89.5, 192.0], [89.6, 193.0], [89.7, 193.0], [89.8, 194.0], [89.9, 194.0], [90.0, 194.0], [90.1, 195.0], [90.2, 195.0], [90.3, 195.0], [90.4, 196.0], [90.5, 196.0], [90.6, 196.0], [90.7, 196.0], [90.8, 197.0], [90.9, 197.0], [91.0, 197.0], [91.1, 198.0], [91.2, 198.0], [91.3, 198.0], [91.4, 198.0], [91.5, 199.0], [91.6, 199.0], [91.7, 199.0], [91.8, 199.0], [91.9, 200.0], [92.0, 200.0], [92.1, 200.0], [92.2, 200.0], [92.3, 201.0], [92.4, 201.0], [92.5, 201.0], [92.6, 202.0], [92.7, 202.0], [92.8, 202.0], [92.9, 203.0], [93.0, 203.0], [93.1, 203.0], [93.2, 204.0], [93.3, 204.0], [93.4, 205.0], [93.5, 205.0], [93.6, 206.0], [93.7, 206.0], [93.8, 207.0], [93.9, 208.0], [94.0, 208.0], [94.1, 209.0], [94.2, 210.0], [94.3, 212.0], [94.4, 213.0], [94.5, 215.0], [94.6, 218.0], [94.7, 222.0], [94.8, 227.0], [94.9, 231.0], [95.0, 233.0], [95.1, 235.0], [95.2, 237.0], [95.3, 239.0], [95.4, 241.0], [95.5, 243.0], [95.6, 245.0], [95.7, 246.0], [95.8, 248.0], [95.9, 250.0], [96.0, 252.0], [96.1, 254.0], [96.2, 256.0], [96.3, 258.0], [96.4, 260.0], [96.5, 261.0], [96.6, 263.0], [96.7, 266.0], [96.8, 269.0], [96.9, 273.0], [97.0, 278.0], [97.1, 283.0], [97.2, 287.0], [97.3, 290.0], [97.4, 292.0], [97.5, 294.0], [97.6, 296.0], [97.7, 297.0], [97.8, 299.0], [97.9, 300.0], [98.0, 302.0], [98.1, 305.0], [98.2, 307.0], [98.3, 312.0], [98.4, 321.0], [98.5, 334.0], [98.6, 345.0], [98.7, 357.0], [98.8, 364.0], [98.9, 369.0], [99.0, 376.0], [99.1, 384.0], [99.2, 394.0], [99.3, 408.0], [99.4, 436.0], [99.5, 475.0], [99.6, 520.0], [99.7, 582.0], [99.8, 664.0], [99.9, 43425.0], [100.0, 84200.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 574603.0, "series": [{"data": [[600.0, 612.0], [700.0, 133.0], [800.0, 35.0], [900.0, 13.0], [1000.0, 3.0], [1100.0, 1.0], [1300.0, 20.0], [1400.0, 5.0], [1500.0, 1.0], [1600.0, 9.0], [3300.0, 18.0], [3400.0, 5.0], [3600.0, 6.0], [66500.0, 4.0], [66700.0, 14.0], [70500.0, 6.0], [70700.0, 10.0], [78500.0, 12.0], [78700.0, 21.0], [84100.0, 316.0], [7300.0, 22.0], [7400.0, 7.0], [7500.0, 2.0], [7600.0, 9.0], [15300.0, 15.0], [15600.0, 6.0], [15400.0, 12.0], [21300.0, 3.0], [21400.0, 5.0], [22300.0, 3.0], [22400.0, 24.0], [21700.0, 1.0], [21600.0, 8.0], [22600.0, 8.0], [24400.0, 18.0], [24300.0, 3.0], [24600.0, 9.0], [100.0, 574603.0], [28400.0, 17.0], [28600.0, 8.0], [28800.0, 1.0], [28700.0, 1.0], [36400.0, 15.0], [36700.0, 5.0], [36600.0, 21.0], [42400.0, 5.0], [42600.0, 28.0], [42700.0, 14.0], [43400.0, 15.0], [43600.0, 15.0], [43700.0, 5.0], [45400.0, 16.0], [45600.0, 6.0], [45700.0, 13.0], [49400.0, 8.0], [49700.0, 19.0], [49600.0, 6.0], [200.0, 37544.0], [57700.0, 21.0], [57400.0, 7.0], [57600.0, 3.0], [63400.0, 9.0], [64400.0, 7.0], [64600.0, 3.0], [64700.0, 13.0], [63700.0, 36.0], [64500.0, 3.0], [63500.0, 3.0], [63600.0, 2.0], [66400.0, 11.0], [70600.0, 2.0], [70400.0, 6.0], [300.0, 8741.0], [78400.0, 7.0], [78800.0, 2.0], [84000.0, 8.0], [84200.0, 1.0], [400.0, 1938.0], [500.0, 1024.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 84200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 326.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 566901.0, "series": [{"data": [[0.0, 56752.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1632.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 326.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 566901.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 16.163944723618098, "minX": 1.75028274E12, "maxY": 500.0, "series": [{"data": [[1.75028328E12, 114.31977516291441], [1.75028292E12, 100.0], [1.75028346E12, 500.0], [1.75028274E12, 16.163944723618098], [1.75028304E12, 99.79723362213105], [1.75028334E12, 280.16824008171614], [1.75028286E12, 85.3651801984203], [1.75028352E12, 500.0], [1.75028298E12, 100.0], [1.7502834E12, 456.83621039406717], [1.7502828E12, 47.22415138509583], [1.75028358E12, 489.84381484437364]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75028358E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 121.65635359116034, "minX": 1.0, "maxY": 28920.0, "series": [{"data": [[2.0, 4616.61111111111], [3.0, 2770.5000000000005], [4.0, 1418.511111111111], [5.0, 1165.642857142857], [6.0, 1024.4142857142858], [7.0, 1062.7912087912089], [8.0, 139.03061224489795], [9.0, 1198.1666666666665], [10.0, 468.52713178294573], [11.0, 450.42028985507255], [12.0, 562.2434210526316], [13.0, 383.27485380116957], [14.0, 467.23560209424085], [15.0, 372.3091787439613], [16.0, 333.89150943396237], [17.0, 416.5223214285714], [18.0, 513.7567567567569], [19.0, 495.9382716049382], [20.0, 131.07942238267148], [21.0, 465.30107526881716], [22.0, 350.57761732852], [23.0, 274.6633986928106], [24.0, 378.557632398754], [25.0, 429.3645484949832], [26.0, 252.73055555555555], [27.0, 246.65027322404376], [28.0, 357.16981132075466], [29.0, 243.46649484536084], [30.0, 239.99031476997575], [31.0, 277.44369369369366], [32.0, 265.7429193899783], [33.0, 294.87974683544303], [34.0, 221.7553191489363], [35.0, 295.7667342799189], [36.0, 259.1350806451611], [37.0, 252.63513513513513], [38.0, 260.08687615526793], [39.0, 243.06193078324225], [40.0, 275.4908424908426], [41.0, 289.50000000000006], [42.0, 220.75176056338017], [43.0, 192.29500000000007], [44.0, 255.38511326860828], [45.0, 181.8374613003096], [46.0, 182.8950617283951], [47.0, 224.83004552352048], [48.0, 197.6587537091989], [49.0, 218.90791366906475], [50.0, 229.94712990936557], [51.0, 226.03034482758636], [52.0, 185.62585969738643], [53.0, 198.2584573748308], [54.0, 126.69668874172187], [55.0, 262.6866242038216], [56.0, 215.00000000000006], [57.0, 184.11194968553463], [58.0, 227.09397590361453], [59.0, 185.54402895054287], [60.0, 181.1407588739291], [61.0, 228.64326812428075], [62.0, 219.76238738738732], [63.0, 202.602991944764], [64.0, 216.59888888888915], [65.0, 216.50701186623525], [66.0, 173.32429501084613], [67.0, 206.5137211855104], [68.0, 126.67272727272722], [69.0, 218.33096446700523], [70.0, 205.55463059313212], [71.0, 172.53853564547205], [72.0, 182.92636815920412], [73.0, 164.48964218455737], [74.0, 206.32254995242633], [75.0, 184.36025998142983], [76.0, 174.3097014925372], [77.0, 173.0876338851023], [78.0, 194.9446397188048], [79.0, 163.285079928952], [80.0, 185.00179372197312], [81.0, 173.8950672645738], [82.0, 169.98759964570428], [83.0, 178.19360269360277], [84.0, 198.65371621621614], [85.0, 154.30864197530866], [86.0, 192.56990131578948], [87.0, 169.90388007054665], [88.0, 159.35885167464113], [89.0, 158.25863392171914], [90.0, 186.64614121510652], [91.0, 177.86687306501545], [92.0, 185.28744326777615], [93.0, 174.61365341335346], [94.0, 158.36641791044778], [95.0, 195.13374327440425], [96.0, 181.5870535714285], [97.0, 165.43880597014908], [98.0, 126.04316546762615], [99.0, 201.42241379310346], [100.0, 127.21212551588155], [101.0, 559.4923076923078], [102.0, 588.925], [103.0, 647.2877697841725], [104.0, 279.5780141843972], [105.0, 612.894366197183], [106.0, 521.0], [107.0, 538.2085308056871], [108.0, 310.8943089430893], [109.0, 360.2852112676057], [110.0, 390.0083682008368], [111.0, 347.72280701754386], [112.0, 383.20967741935476], [113.0, 316.9254237288136], [114.0, 381.28735632183907], [115.0, 323.7130801687765], [116.0, 471.36842105263156], [117.0, 358.4615384615384], [118.0, 419.34008097165986], [119.0, 405.0499999999999], [120.0, 305.5669781931464], [121.0, 367.7924528301887], [122.0, 281.8844765342961], [123.0, 397.51132686084145], [124.0, 283.93470790378007], [125.0, 218.72000000000003], [126.0, 410.96587030716717], [127.0, 261.683870967742], [128.0, 396.0195439739414], [129.0, 303.53605015673986], [130.0, 128.15309446254076], [131.0, 650.4964285714285], [132.0, 277.07667731629397], [133.0, 307.06338028169], [134.0, 418.1083916083916], [135.0, 253.46712802768167], [136.0, 133.26380368098177], [137.0, 599.4625407166125], [138.0, 274.9148264984225], [139.0, 240.0552147239264], [140.0, 275.1672354948806], [141.0, 380.14802631578937], [142.0, 293.48563218390814], [143.0, 257.12209302325584], [144.0, 123.82926829268298], [145.0, 445.8733509234829], [146.0, 291.26530612244903], [147.0, 329.6220472440945], [148.0, 319.05830903790087], [149.0, 237.19896640826863], [150.0, 215.19817073170745], [151.0, 298.33062330623306], [152.0, 259.8150134048256], [153.0, 237.31927710843377], [154.0, 289.7931937172776], [155.0, 206.30939226519342], [156.0, 235.86548223350246], [157.0, 122.83002832861189], [158.0, 384.1205673758865], [159.0, 257.7158469945355], [160.0, 223.5645933014354], [161.0, 258.5486486486486], [162.0, 332.32539682539687], [163.0, 288.92137592137595], [164.0, 242.87500000000006], [165.0, 271.9885057471264], [166.0, 336.05523255813955], [167.0, 255.78780487804886], [168.0, 282.8888888888888], [169.0, 323.49035812672173], [170.0, 249.52631578947376], [171.0, 277.9166666666668], [172.0, 301.96256684491976], [173.0, 312.2777777777778], [174.0, 313.8176470588236], [175.0, 305.12682926829274], [176.0, 343.0861618798955], [177.0, 199.0371134020619], [178.0, 240.65295629820054], [179.0, 255.67346938775506], [180.0, 125.57772020725378], [181.0, 342.4081145584726], [182.0, 260.2231578947369], [183.0, 212.02398081534764], [184.0, 252.1132897603486], [185.0, 224.05633802816908], [186.0, 329.1105882352939], [187.0, 265.5404255319148], [188.0, 257.8031496062992], [189.0, 240.106888361045], [190.0, 253.85420944558518], [191.0, 306.577680525164], [192.0, 215.82655246252676], [193.0, 255.2930327868853], [194.0, 246.34698275862058], [195.0, 250.8853118712274], [196.0, 275.0706638115632], [197.0, 318.7471264367816], [198.0, 234.04729729729712], [199.0, 180.847619047619], [200.0, 203.74308300395268], [201.0, 179.58426966292132], [202.0, 203.51241534988714], [203.0, 148.17307692307693], [204.0, 460.1208226221081], [205.0, 272.82422802850357], [206.0, 204.35877862595427], [207.0, 220.37931034482767], [208.0, 242.10825688073402], [209.0, 232.308533916849], [210.0, 166.8306306306306], [211.0, 169.0916666666667], [212.0, 221.83999999999997], [213.0, 216.59051724137922], [214.0, 221.46804835924002], [215.0, 171.2660944206008], [216.0, 217.66666666666663], [217.0, 236.00000000000006], [218.0, 177.16630196936538], [219.0, 233.0429906542055], [220.0, 175.21229050279317], [221.0, 180.38983050847463], [222.0, 250.0526315789475], [223.0, 208.5463137996219], [224.0, 149.35614035087724], [225.0, 122.80952380952375], [226.0, 338.56069364161846], [227.0, 240.54748603351953], [228.0, 205.83424408014577], [229.0, 233.2268041237112], [230.0, 210.35272045028145], [231.0, 184.1533742331289], [232.0, 215.580459770115], [233.0, 183.3327032136106], [234.0, 209.45778611632267], [235.0, 272.24700239808146], [236.0, 216.436090225564], [237.0, 172.20152091254766], [238.0, 196.45616883116884], [239.0, 179.83122362869207], [240.0, 210.19547657512118], [241.0, 123.09123434704829], [242.0, 300.9867549668875], [243.0, 164.64054514480404], [244.0, 201.37222222222226], [245.0, 165.21609538002974], [246.0, 280.3673870333988], [247.0, 214.52958152958166], [248.0, 206.8595825426945], [249.0, 208.66499162479062], [250.0, 189.7500000000001], [251.0, 212.66953528399324], [252.0, 188.30656934306558], [253.0, 193.0167504187604], [254.0, 168.5575539568345], [255.0, 188.2088888888889], [257.0, 202.47557003257342], [256.0, 218.35483870967732], [258.0, 276.6702508960574], [259.0, 201.03328290468997], [260.0, 159.4674267100978], [261.0, 178.73323170731706], [262.0, 165.76395534290276], [263.0, 126.08960573476703], [264.0, 223.7882960413081], [270.0, 170.84984984985], [271.0, 267.04690117252926], [268.0, 291.25044091710765], [269.0, 174.18909710391821], [265.0, 276.1025641025642], [266.0, 319.94891944990184], [267.0, 283.34232715008443], [273.0, 265.0063291139242], [272.0, 141.995137763371], [274.0, 176.8376811594203], [275.0, 195.4361873990307], [276.0, 154.93150684931507], [277.0, 190.83069620253158], [278.0, 181.95700416088764], [279.0, 157.86614173228352], [280.0, 233.94141145139804], [286.0, 265.2616372391653], [287.0, 259.32237871674494], [284.0, 223.68560606060606], [285.0, 208.5257142857145], [281.0, 135.12377850162866], [282.0, 163.8331034482759], [283.0, 220.4], [289.0, 182.89660265878882], [288.0, 300.8648180242634], [290.0, 199.8500727802038], [291.0, 195.46272855133623], [292.0, 249.9388971684053], [293.0, 236.57824933686996], [294.0, 227.81871345029248], [295.0, 235.7822580645161], [296.0, 123.46362339514987], [302.0, 574.978354978355], [303.0, 199.17948717948715], [300.0, 243.91187050359713], [301.0, 185.36185819070917], [297.0, 336.7662771285475], [298.0, 190.56844106463868], [299.0, 215.5566801619434], [305.0, 143.51632970451013], [304.0, 257.0673499267935], [306.0, 250.97950819672133], [307.0, 249.41522988505764], [308.0, 175.88929440389305], [309.0, 185.10144927536243], [310.0, 226.85450061652278], [311.0, 160.86103151862457], [312.0, 234.1111111111111], [318.0, 166.7913279132791], [319.0, 128.43870967741935], [316.0, 177.61465400271368], [317.0, 138.57713498622593], [313.0, 150.9520725388601], [314.0, 155.05285118219754], [315.0, 229.24371859296477], [321.0, 154.13364595545127], [320.0, 192.3214285714286], [322.0, 156.41496598639463], [323.0, 166.0310391363024], [324.0, 150.18881118881126], [325.0, 136.3618784530388], [326.0, 164.34518348623848], [327.0, 124.34632034632033], [328.0, 121.65635359116034], [334.0, 221.7400468384075], [335.0, 184.1712802768167], [332.0, 159.99999999999986], [333.0, 164.12807017543867], [329.0, 123.09861111111118], [330.0, 130.16750629722924], [331.0, 136.37568306010928], [337.0, 144.493894165536], [336.0, 163.94249201277967], [338.0, 340.8721804511279], [339.0, 134.68559556786718], [340.0, 143.18758620689627], [341.0, 134.16212710765237], [342.0, 131.14965034965024], [343.0, 123.87526652452016], [344.0, 124.56818181818166], [350.0, 135.94928478543576], [351.0, 152.9367283950619], [348.0, 144.4371508379888], [349.0, 128.45335085413927], [345.0, 121.83772391991565], [346.0, 122.66578249336865], [347.0, 124.61353711790393], [353.0, 150.20584144645338], [352.0, 158.3891336270191], [354.0, 131.90265486725667], [355.0, 128.49549549549562], [356.0, 128.18808411214948], [357.0, 124.81190476190474], [358.0, 123.35341830822709], [359.0, 121.97117516629703], [360.0, 129.35502958579855], [366.0, 180.52787456445992], [367.0, 216.20475319926877], [364.0, 136.30566534914354], [365.0, 151.17403314917132], [361.0, 126.42632850241539], [362.0, 123.23196448390674], [363.0, 125.55061728395076], [369.0, 185.96562032884904], [368.0, 189.15837937384916], [370.0, 145.36186770428034], [371.0, 141.38860759493662], [372.0, 132.96397515527943], [373.0, 178.40184049079753], [374.0, 134.48192771084345], [375.0, 126.07219827586212], [376.0, 124.56336405529954], [382.0, 152.21336760925465], [383.0, 164.8137931034482], [380.0, 122.22624434389125], [381.0, 130.18388195232703], [377.0, 126.91382978723404], [378.0, 122.82915717539869], [379.0, 122.68157614483485], [385.0, 186.59277504105088], [384.0, 189.9968895800936], [386.0, 179.96605374823193], [387.0, 168.8265895953756], [388.0, 166.2000000000001], [389.0, 148.22111801242224], [390.0, 140.4970963995352], [391.0, 142.5230179028132], [392.0, 164.04126547455311], [398.0, 170.58425414364646], [399.0, 187.93927893738146], [396.0, 128.03333333333333], [397.0, 145.88541666666683], [393.0, 146.221714285714], [394.0, 127.57640750670247], [395.0, 132.5796963946869], [401.0, 182.80500000000012], [400.0, 191.02802359882023], [402.0, 189.02875399361034], [403.0, 220.860095389507], [404.0, 171.76230661040807], [405.0, 158.1393861892581], [406.0, 152.48157894736846], [407.0, 167.9053876478316], [408.0, 173.5787234042556], [414.0, 126.09081735620587], [415.0, 166.03314917127088], [412.0, 122.5220125786163], [413.0, 123.93146718146721], [409.0, 149.96881959910925], [410.0, 141.36722488038274], [411.0, 133.71532846715326], [417.0, 217.1039215686275], [416.0, 169.6046511627905], [418.0, 199.69090909090912], [419.0, 181.66220238095264], [420.0, 191.05932203389844], [421.0, 187.55714285714296], [422.0, 188.47577092511017], [423.0, 182.42233632862644], [424.0, 145.6368843069874], [430.0, 146.382256297919], [431.0, 172.29230769230765], [428.0, 126.92606284658036], [429.0, 123.9095982142856], [425.0, 164.10838709677418], [426.0, 134.7293729372938], [427.0, 123.7849264705881], [433.0, 208.53024193548396], [432.0, 185.90895522388064], [434.0, 262.7689463955639], [435.0, 225.71405492730176], [436.0, 223.38423645320202], [437.0, 184.6212338593974], [438.0, 171.89999999999998], [439.0, 170.16762177650443], [440.0, 243.74233128834356], [446.0, 123.92757660167133], [447.0, 140.4058295964123], [444.0, 162.4252577319589], [445.0, 132.86608863198455], [441.0, 255.82808398950158], [442.0, 172.33749999999995], [443.0, 150.70829268292687], [449.0, 178.21908602150543], [448.0, 150.1323042998897], [450.0, 179.91228070175433], [451.0, 183.24621733149928], [452.0, 184.79857142857156], [453.0, 199.4590395480227], [454.0, 206.30687022900767], [455.0, 197.83381924198255], [456.0, 193.20891364902505], [462.0, 154.59978308026035], [463.0, 132.05992509363304], [460.0, 196.5458333333335], [461.0, 167.3606356968215], [457.0, 162.1873563218391], [458.0, 182.81806930693085], [459.0, 157.70110701106998], [465.0, 200.105421686747], [464.0, 174.25630252100837], [466.0, 537.76130198915], [467.0, 245.65272727272725], [468.0, 262.2266401590457], [469.0, 267.4040404040399], [470.0, 233.17232375979086], [471.0, 191.40839160839147], [472.0, 184.06482593037228], [478.0, 164.17070484581524], [479.0, 158.54966139954863], [476.0, 150.04054054054058], [477.0, 161.91463414634134], [473.0, 179.58526603001354], [474.0, 196.45375000000018], [475.0, 168.88316151202744], [481.0, 187.94779116465875], [480.0, 131.54712041884775], [482.0, 163.12998859749163], [483.0, 204.0739436619718], [484.0, 215.08408796895225], [485.0, 183.60705882352957], [486.0, 181.37288135593226], [487.0, 193.81014492753607], [488.0, 240.89202657807292], [494.0, 135.85645472061674], [495.0, 172.5743162901306], [492.0, 167.22984356197384], [493.0, 184.78531073446317], [489.0, 240.41287284144423], [490.0, 187.6682027649768], [491.0, 156.6831578947368], [496.0, 178.73553719008285], [497.0, 181.4253521126762], [498.0, 212.46816976127317], [499.0, 245.314401622718], [500.0, 333.81651124377476], [1.0, 28920.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[310.096494467016, 227.195317857263]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9764.266666666666, "minX": 1.75028274E12, "maxY": 5582335.85, "series": [{"data": [[1.75028328E12, 4099704.216666667], [1.75028292E12, 4665980.95], [1.75028346E12, 5070982.066666666], [1.75028274E12, 1742771.0], [1.75028304E12, 1855539.5666666667], [1.75028334E12, 5412871.133333334], [1.75028286E12, 4765168.9], [1.75028352E12, 4585305.15], [1.75028298E12, 4894836.783333333], [1.7502834E12, 5582335.85], [1.7502828E12, 4578399.0], [1.75028358E12, 1046645.7333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75028328E12, 99295.6], [1.75028292E12, 145209.73333333334], [1.75028346E12, 275754.6666666667], [1.75028274E12, 9764.266666666666], [1.75028304E12, 60526.8], [1.75028334E12, 372268.8], [1.75028286E12, 121170.13333333333], [1.75028352E12, 119250.4], [1.75028298E12, 144608.66666666666], [1.7502834E12, 468641.86666666664], [1.7502828E12, 62878.933333333334], [1.75028358E12, 38173.86666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75028358E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 125.9545523635807, "minX": 1.75028274E12, "maxY": 1843.8284118116535, "series": [{"data": [[1.75028328E12, 132.555607029246], [1.75028292E12, 126.66469557137144], [1.75028346E12, 153.57964857651237], [1.75028274E12, 134.9230527638191], [1.75028304E12, 125.9545523635807], [1.75028334E12, 133.00802359298706], [1.75028286E12, 127.13950192346572], [1.75028352E12, 894.8394796698076], [1.75028298E12, 127.1025129890789], [1.7502834E12, 178.0123087594403], [1.7502828E12, 128.59617635583342], [1.75028358E12, 1843.8284118116535]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75028358E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 124.72792217662251, "minX": 1.75028274E12, "maxY": 1286.366480446927, "series": [{"data": [[1.75028328E12, 129.71889187436344], [1.75028292E12, 125.13271103039038], [1.75028346E12, 151.94061387900268], [1.75028274E12, 130.59893216080408], [1.75028304E12, 124.72792217662251], [1.75028334E12, 131.43632199815653], [1.75028286E12, 125.55945029358183], [1.75028352E12, 369.74934192031435], [1.75028298E12, 125.54776799915192], [1.7502834E12, 175.44108023923826], [1.7502828E12, 126.3642703862656], [1.75028358E12, 1286.366480446927]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75028358E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.4077620712367631, "minX": 1.75028274E12, "maxY": 1713.8782122905025, "series": [{"data": [[1.75028328E12, 1.4412118965996523], [1.75028292E12, 0.5362294354923823], [1.75028346E12, 12.23959074733102], [1.75028274E12, 2.268216080402007], [1.75028304E12, 0.4077620712367631], [1.75028334E12, 0.7737083168577961], [1.75028286E12, 0.6420074913950089], [1.75028352E12, 768.6736947021351], [1.75028298E12, 0.5343229774149076], [1.7502834E12, 0.7547932835137209], [1.7502828E12, 0.7920893484198215], [1.75028358E12, 1713.8782122905025]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75028358E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 122.0, "minX": 1.75028274E12, "maxY": 78810.0, "series": [{"data": [[1.75028328E12, 1550.0], [1.75028292E12, 735.0], [1.75028346E12, 57703.0], [1.75028274E12, 1622.0], [1.75028304E12, 626.0], [1.75028334E12, 962.0], [1.75028286E12, 702.0], [1.75028352E12, 78736.0], [1.75028298E12, 699.0], [1.7502834E12, 1097.0], [1.7502828E12, 879.0], [1.75028358E12, 78810.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75028328E12, 190.0], [1.75028292E12, 151.60000000000036], [1.75028346E12, 344.1999999999998], [1.75028274E12, 141.0], [1.75028304E12, 148.0], [1.75028334E12, 355.0], [1.75028286E12, 146.0], [1.75028352E12, 161.0], [1.75028298E12, 158.0], [1.7502834E12, 569.0], [1.7502828E12, 141.0], [1.75028358E12, 49700.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75028328E12, 618.9300000000003], [1.75028292E12, 389.0], [1.75028346E12, 639.9200000000001], [1.75028274E12, 377.46000000000004], [1.75028304E12, 374.9699999999998], [1.75028334E12, 576.2999999999993], [1.75028286E12, 384.0], [1.75028352E12, 426.4200000000001], [1.75028298E12, 392.0], [1.7502834E12, 759.71], [1.7502828E12, 370.0], [1.75028358E12, 78754.4]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75028328E12, 314.64999999999964], [1.75028292E12, 245.0], [1.75028346E12, 438.0], [1.75028274E12, 150.0], [1.75028304E12, 166.8499999999999], [1.75028334E12, 400.25], [1.75028286E12, 164.0], [1.75028352E12, 269.0], [1.75028298E12, 229.69999999999982], [1.7502834E12, 632.0], [1.7502828E12, 149.0], [1.75028358E12, 63741.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75028328E12, 122.0], [1.75028292E12, 122.0], [1.75028346E12, 122.0], [1.75028274E12, 123.0], [1.75028304E12, 122.0], [1.75028334E12, 122.0], [1.75028286E12, 122.0], [1.75028352E12, 122.0], [1.75028298E12, 123.0], [1.7502834E12, 123.0], [1.7502828E12, 122.0], [1.75028358E12, 122.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75028328E12, 132.0], [1.75028292E12, 131.0], [1.75028346E12, 137.0], [1.75028274E12, 129.0], [1.75028304E12, 132.0], [1.75028334E12, 144.0], [1.75028286E12, 130.0], [1.75028352E12, 130.0], [1.75028298E12, 131.0], [1.7502834E12, 316.0], [1.7502828E12, 129.0], [1.75028358E12, 131.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75028358E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 120.0, "minX": 1.0, "maxY": 84183.0, "series": [{"data": [[2.0, 36679.0], [3.0, 50215.0], [4.0, 45685.0], [5.0, 57717.5], [6.0, 23660.0], [7.0, 44724.0], [8.0, 49721.0], [9.0, 39698.0], [10.0, 49736.5], [11.0, 49719.0], [12.0, 63719.0], [13.0, 45705.5], [14.0, 143.0], [21.0, 128.0], [24.0, 127.0], [32.0, 126.0], [36.0, 127.0], [40.0, 127.0], [45.0, 129.0], [46.0, 127.0], [52.0, 128.0], [57.0, 127.0], [62.0, 127.0], [64.0, 128.0], [73.0, 134.0], [75.0, 131.0], [74.0, 128.5], [77.0, 128.0], [81.0, 127.0], [87.0, 131.0], [89.0, 133.0], [95.0, 127.0], [102.0, 128.0], [101.0, 129.0], [110.0, 131.0], [115.0, 127.5], [119.0, 127.0], [127.0, 126.5], [125.0, 127.0], [135.0, 129.0], [136.0, 129.0], [145.0, 129.0], [151.0, 128.0], [150.0, 135.0], [144.0, 129.5], [157.0, 127.0], [153.0, 135.0], [152.0, 133.0], [159.0, 133.0], [161.0, 129.0], [172.0, 133.0], [170.0, 129.0], [176.0, 131.0], [191.0, 130.5], [196.0, 132.0], [199.0, 128.0], [203.0, 130.0], [201.0, 129.0], [210.0, 129.0], [224.0, 131.0], [235.0, 128.0], [236.0, 129.0], [233.0, 130.0], [244.0, 129.0], [242.0, 131.0], [248.0, 128.0], [251.0, 129.0], [261.0, 127.0], [256.0, 127.0], [267.0, 133.0], [274.0, 127.0], [284.0, 126.0], [280.0, 131.0], [281.0, 130.0], [287.0, 132.0], [296.0, 128.0], [291.0, 131.0], [305.0, 127.0], [310.0, 128.0], [314.0, 130.0], [315.0, 129.0], [330.0, 131.0], [331.0, 130.0], [336.0, 128.0], [351.0, 127.0], [337.0, 130.0], [345.0, 133.0], [362.0, 128.0], [360.0, 130.0], [370.0, 128.0], [368.0, 126.5], [374.0, 128.0], [378.0, 128.0], [375.0, 129.0], [381.0, 127.0], [386.0, 127.0], [390.0, 130.0], [387.0, 131.0], [396.0, 127.0], [391.0, 127.0], [394.0, 125.0], [405.0, 129.0], [403.0, 129.0], [411.0, 129.0], [413.0, 126.0], [421.0, 133.0], [430.0, 127.0], [427.0, 131.0], [424.0, 137.0], [425.0, 129.0], [433.0, 128.0], [444.0, 126.0], [436.0, 131.0], [443.0, 128.0], [446.0, 129.0], [435.0, 126.0], [438.0, 129.0], [434.0, 128.0], [456.0, 130.0], [452.0, 126.0], [466.0, 133.0], [464.0, 129.0], [479.0, 130.0], [476.0, 127.0], [481.0, 131.0], [493.0, 130.0], [485.0, 129.5], [480.0, 130.0], [482.0, 131.0], [483.0, 127.0], [491.0, 129.0], [499.0, 125.5], [500.0, 126.0], [508.0, 130.0], [510.0, 130.0], [501.0, 127.0], [505.0, 138.0], [517.0, 133.0], [538.0, 130.0], [537.0, 128.0], [521.0, 128.0], [524.0, 129.0], [525.0, 131.0], [535.0, 132.0], [530.0, 136.5], [543.0, 136.0], [542.0, 132.5], [527.0, 129.0], [515.0, 131.0], [516.0, 133.0], [561.0, 126.0], [548.0, 130.0], [544.0, 128.0], [573.0, 128.0], [575.0, 128.0], [574.0, 130.0], [558.0, 129.0], [567.0, 129.0], [566.0, 136.0], [563.0, 127.0], [551.0, 134.0], [565.0, 131.0], [603.0, 127.0], [591.0, 131.0], [604.0, 132.0], [587.0, 130.0], [584.0, 129.5], [588.0, 131.5], [607.0, 137.0], [599.0, 130.0], [598.0, 130.0], [594.0, 127.0], [595.0, 130.5], [593.0, 129.0], [590.0, 129.0], [581.0, 127.0], [576.0, 127.0], [580.0, 129.0], [578.0, 129.0], [583.0, 127.0], [602.0, 140.0], [600.0, 128.0], [639.0, 132.0], [630.0, 134.0], [608.0, 131.0], [623.0, 129.0], [627.0, 128.0], [611.0, 128.0], [631.0, 125.0], [626.0, 129.0], [612.0, 129.0], [665.0, 179.0], [641.0, 131.0], [663.0, 128.0], [662.0, 131.0], [653.0, 130.0], [651.0, 133.0], [661.0, 132.0], [646.0, 132.0], [669.0, 128.0], [645.0, 127.5], [688.0, 128.0], [694.0, 128.0], [681.0, 129.0], [691.0, 130.0], [700.0, 133.0], [675.0, 142.0], [687.0, 151.0], [682.0, 130.0], [695.0, 133.0], [697.0, 131.0], [719.0, 130.0], [709.0, 141.0], [710.0, 143.0], [718.0, 130.0], [717.0, 136.0], [715.0, 129.0], [713.0, 137.0], [716.0, 133.0], [730.0, 130.0], [733.0, 128.0], [731.0, 126.0], [734.0, 128.0], [727.0, 133.0], [705.0, 136.0], [704.0, 136.5], [763.0, 132.5], [748.0, 129.0], [746.0, 133.0], [743.0, 133.0], [740.0, 135.5], [766.0, 134.0], [745.0, 132.0], [765.0, 132.0], [764.0, 131.0], [761.0, 134.0], [762.0, 130.0], [757.0, 136.0], [758.0, 135.0], [752.0, 134.0], [795.0, 129.0], [785.0, 129.0], [770.0, 129.0], [782.0, 131.0], [792.0, 131.0], [775.0, 136.0], [772.0, 132.0], [771.0, 132.0], [773.0, 131.0], [774.0, 132.0], [793.0, 130.0], [794.0, 131.0], [797.0, 131.0], [796.0, 126.0], [787.0, 128.0], [789.0, 129.0], [788.0, 132.0], [786.0, 130.0], [790.0, 128.0], [791.0, 131.0], [784.0, 131.0], [799.0, 128.0], [798.0, 131.5], [783.0, 132.0], [768.0, 134.0], [769.0, 129.0], [776.0, 134.0], [777.0, 131.0], [780.0, 130.0], [779.0, 131.0], [778.0, 131.0], [801.0, 130.0], [831.0, 128.0], [811.0, 127.0], [812.0, 190.5], [827.0, 126.0], [830.0, 128.0], [829.0, 128.0], [802.0, 129.0], [804.0, 127.0], [826.0, 127.0], [825.0, 128.0], [807.0, 132.0], [806.0, 127.0], [805.0, 127.0], [809.0, 131.0], [808.0, 128.0], [810.0, 127.0], [813.0, 129.5], [818.0, 129.0], [816.0, 130.0], [817.0, 131.0], [821.0, 128.0], [822.0, 129.0], [820.0, 132.0], [819.0, 130.0], [800.0, 127.0], [815.0, 133.5], [814.0, 126.5], [851.0, 127.0], [838.0, 125.0], [843.0, 126.0], [832.0, 127.0], [835.0, 129.0], [849.0, 142.0], [877.0, 133.0], [869.0, 140.5], [890.0, 130.0], [905.0, 129.0], [902.0, 130.5], [932.0, 131.0], [945.0, 138.0], [973.0, 133.5], [985.0, 129.0], [982.0, 133.0], [967.0, 133.0], [975.0, 127.0], [1004.0, 131.0], [1054.0, 131.0], [1060.0, 132.0], [1035.0, 129.0], [1031.0, 125.0], [1094.0, 125.5], [1095.0, 129.0], [1118.0, 129.0], [1168.0, 135.0], [1197.0, 131.0], [1193.0, 128.0], [1157.0, 137.0], [1156.0, 127.0], [1220.0, 131.5], [1278.0, 129.0], [1256.0, 136.0], [1235.0, 133.0], [1233.0, 132.0], [1230.0, 127.0], [1240.0, 135.0], [1268.0, 129.0], [1281.0, 131.5], [1331.0, 134.0], [1314.0, 128.0], [1293.0, 131.0], [1304.0, 172.0], [1383.0, 131.0], [1407.0, 129.0], [1349.0, 139.0], [1392.0, 171.0], [1406.0, 128.5], [1359.0, 136.0], [1375.0, 128.0], [1440.0, 138.0], [1459.0, 147.0], [1477.0, 130.0], [1496.0, 136.0], [1485.0, 133.0], [1493.0, 175.5], [1578.0, 130.0], [1593.0, 271.0], [1599.0, 134.0], [1562.0, 130.0], [1615.0, 143.0], [1646.0, 142.0], [1670.0, 128.0], [1665.0, 133.0], [1666.0, 427.0], [1784.0, 380.5], [1765.0, 127.0], [1746.0, 133.0], [1761.0, 126.0], [1737.0, 139.0], [1786.0, 134.0], [1739.0, 447.0], [1759.0, 496.0], [1776.0, 362.0], [1849.0, 130.0], [1848.0, 144.0], [1801.0, 286.5], [1829.0, 213.0], [1854.0, 132.5], [1805.0, 128.0], [1907.0, 130.5], [1862.0, 140.0], [1910.0, 179.0], [1882.0, 214.5], [1905.0, 307.0], [1884.0, 446.0], [1952.0, 142.0], [1955.0, 466.0], [1997.0, 134.0], [2001.0, 133.0], [1991.0, 169.0], [2031.0, 300.0], [2100.0, 137.0], [2128.0, 267.0], [2086.0, 308.0], [2076.0, 309.0], [2080.0, 486.0], [2090.0, 162.0], [2288.0, 154.0], [2268.0, 166.0], [2298.0, 195.0], [2284.0, 301.0], [2212.0, 360.0], [2290.0, 268.0], [2394.0, 202.0], [2400.0, 254.0], [2384.0, 210.0], [2414.0, 294.0], [2390.0, 361.5], [2312.0, 365.5], [2406.0, 140.0], [2502.0, 134.0], [2538.0, 133.0], [2504.0, 213.5], [2518.0, 169.0], [2512.0, 313.5], [2456.0, 151.5], [2550.0, 175.5], [2548.0, 361.0], [2442.0, 219.0], [2434.0, 279.0], [2648.0, 129.0], [2626.0, 152.0], [2618.0, 199.0], [2776.0, 200.0], [2758.0, 297.0], [2788.0, 304.5], [2710.0, 138.5], [2824.0, 140.0], [2904.0, 225.5], [2822.0, 305.0], [3056.0, 275.0], [3152.0, 166.5], [3080.0, 308.0], [2107.0, 139.0], [2167.0, 131.0], [2159.0, 217.0], [2091.0, 377.0], [2173.0, 404.0], [2129.0, 134.0], [2085.0, 144.0], [2237.0, 130.0], [2249.0, 267.0], [2219.0, 487.5], [2227.0, 136.0], [2347.0, 135.0], [2401.0, 132.0], [2345.0, 133.5], [2373.0, 299.0], [2371.0, 163.0], [2423.0, 374.0], [2335.0, 313.0], [2329.0, 391.0], [2475.0, 324.5], [2481.0, 141.0], [2469.0, 304.5], [2467.0, 452.0], [2473.0, 337.0], [2489.0, 137.0], [2547.0, 270.0], [2521.0, 131.0], [2433.0, 256.0], [2671.0, 150.0], [2561.0, 377.5], [2649.0, 379.0], [2569.0, 365.0], [2647.0, 298.0], [2713.0, 207.0], [2699.0, 290.5], [2811.0, 235.0], [2841.0, 301.0], [2933.0, 132.0], [2885.0, 183.0], [2831.0, 213.5], [2925.0, 320.0], [2871.0, 300.0], [2869.0, 207.0], [2849.0, 154.0], [3063.0, 141.0], [2951.0, 210.0], [3083.0, 131.0], [3081.0, 261.0], [3127.0, 357.0], [3249.0, 207.0], [3253.0, 147.0], [3467.0, 182.5], [1.0, 57725.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 84182.0], [3.0, 84183.0], [5.0, 84141.0], [7.0, 84140.0], [8.0, 84139.0], [9.0, 84126.0], [10.0, 84131.0], [11.0, 84160.0], [12.0, 84126.0], [13.0, 84170.0], [14.0, 26414.0], [62.0, 121.0], [73.0, 126.5], [75.0, 129.5], [77.0, 124.0], [102.0, 125.0], [101.0, 123.0], [110.0, 123.0], [115.0, 123.0], [119.0, 121.5], [127.0, 121.0], [125.0, 121.0], [135.0, 123.5], [136.0, 123.0], [145.0, 123.5], [151.0, 122.0], [150.0, 124.0], [157.0, 122.5], [153.0, 126.0], [152.0, 126.0], [159.0, 128.5], [161.0, 123.0], [172.0, 125.0], [170.0, 123.0], [176.0, 125.0], [191.0, 123.0], [196.0, 124.0], [199.0, 124.5], [203.0, 123.0], [201.0, 122.0], [210.0, 122.0], [224.0, 123.0], [235.0, 122.0], [236.0, 122.0], [233.0, 123.0], [244.0, 122.0], [242.0, 123.5], [248.0, 123.0], [251.0, 122.0], [261.0, 121.0], [256.0, 121.0], [267.0, 125.0], [274.0, 121.0], [284.0, 121.0], [280.0, 123.0], [281.0, 122.5], [287.0, 124.0], [296.0, 122.0], [291.0, 122.0], [305.0, 121.0], [310.0, 122.0], [314.0, 123.0], [315.0, 122.0], [330.0, 122.0], [331.0, 122.0], [336.0, 122.0], [351.0, 121.0], [337.0, 123.0], [345.0, 123.0], [362.0, 122.0], [360.0, 123.0], [370.0, 121.0], [368.0, 122.0], [374.0, 121.0], [378.0, 122.0], [375.0, 122.0], [381.0, 121.0], [386.0, 121.0], [390.0, 121.0], [387.0, 123.0], [396.0, 121.0], [391.0, 120.0], [394.0, 120.0], [405.0, 122.0], [403.0, 122.0], [411.0, 122.0], [413.0, 121.0], [421.0, 122.0], [430.0, 122.0], [427.0, 123.0], [424.0, 123.0], [425.0, 121.0], [433.0, 122.0], [444.0, 122.0], [436.0, 122.0], [443.0, 122.0], [446.0, 122.0], [435.0, 120.0], [438.0, 121.0], [434.0, 122.0], [456.0, 122.0], [452.0, 121.0], [466.0, 123.0], [464.0, 121.0], [479.0, 122.0], [476.0, 120.0], [481.0, 122.0], [493.0, 123.0], [485.0, 123.0], [480.0, 122.0], [482.0, 122.0], [483.0, 120.0], [491.0, 120.0], [499.0, 120.0], [500.0, 121.0], [508.0, 122.0], [510.0, 122.0], [501.0, 120.0], [505.0, 124.0], [517.0, 122.0], [538.0, 122.0], [537.0, 121.0], [521.0, 122.0], [524.0, 122.0], [525.0, 123.0], [535.0, 124.0], [530.0, 124.5], [543.0, 124.5], [542.0, 120.0], [527.0, 121.0], [515.0, 124.0], [516.0, 123.0], [561.0, 122.0], [548.0, 122.0], [544.0, 122.0], [573.0, 121.0], [575.0, 121.0], [574.0, 122.0], [558.0, 122.0], [567.0, 123.0], [566.0, 122.0], [563.0, 120.0], [551.0, 123.0], [565.0, 123.0], [603.0, 121.0], [591.0, 122.0], [604.0, 122.0], [587.0, 120.0], [584.0, 121.0], [588.0, 121.0], [607.0, 124.0], [599.0, 123.0], [598.0, 120.0], [594.0, 121.0], [595.0, 121.0], [593.0, 121.0], [590.0, 121.0], [581.0, 121.0], [576.0, 121.0], [580.0, 123.0], [578.0, 121.0], [583.0, 120.0], [602.0, 122.0], [600.0, 123.0], [634.0, 121.0], [630.0, 121.0], [608.0, 122.0], [623.0, 122.0], [627.0, 122.0], [611.0, 121.0], [612.0, 121.0], [639.0, 122.0], [635.0, 122.0], [631.0, 120.0], [626.0, 122.0], [665.0, 147.0], [641.0, 123.0], [663.0, 121.0], [662.0, 123.0], [653.0, 121.0], [651.0, 122.0], [661.0, 123.0], [646.0, 123.0], [669.0, 121.0], [645.0, 122.0], [688.0, 121.0], [694.0, 121.0], [681.0, 122.0], [691.0, 121.0], [700.0, 123.0], [675.0, 131.0], [687.0, 126.0], [682.0, 121.0], [695.0, 122.0], [697.0, 122.0], [719.0, 123.0], [709.0, 124.0], [710.0, 126.0], [718.0, 121.0], [717.0, 122.0], [715.0, 122.0], [713.0, 127.0], [716.0, 123.0], [730.0, 122.0], [733.0, 122.0], [731.0, 120.0], [734.0, 121.0], [727.0, 124.0], [705.0, 125.0], [704.0, 124.0], [763.0, 123.0], [748.0, 121.0], [746.0, 123.0], [743.0, 122.0], [740.0, 123.0], [766.0, 125.0], [745.0, 124.0], [765.0, 123.0], [764.0, 123.0], [761.0, 122.0], [762.0, 122.0], [757.0, 124.0], [758.0, 123.0], [752.0, 123.0], [795.0, 122.0], [785.0, 120.0], [770.0, 120.0], [782.0, 121.0], [792.0, 122.0], [775.0, 127.0], [772.0, 122.0], [771.0, 123.0], [773.0, 123.0], [774.0, 122.0], [793.0, 122.0], [794.0, 121.0], [797.0, 122.0], [796.0, 120.0], [787.0, 122.0], [789.0, 122.0], [788.0, 122.0], [786.0, 122.0], [790.0, 122.0], [791.0, 121.0], [784.0, 122.0], [799.0, 121.0], [798.0, 121.0], [783.0, 123.0], [768.0, 124.0], [769.0, 122.0], [776.0, 124.0], [777.0, 122.0], [780.0, 121.0], [779.0, 121.0], [778.0, 122.0], [801.0, 122.0], [831.0, 121.0], [811.0, 120.0], [812.0, 120.0], [827.0, 120.0], [830.0, 121.0], [829.0, 121.0], [802.0, 121.0], [804.0, 121.0], [826.0, 121.0], [825.0, 120.0], [807.0, 122.0], [806.0, 121.0], [805.0, 121.0], [809.0, 122.0], [808.0, 121.0], [810.0, 121.0], [813.0, 120.0], [818.0, 121.0], [816.0, 121.0], [817.0, 122.0], [821.0, 122.0], [822.0, 122.0], [820.0, 121.0], [819.0, 121.0], [800.0, 121.0], [815.0, 122.0], [814.0, 121.0], [851.0, 120.0], [838.0, 121.0], [843.0, 120.0], [832.0, 121.0], [835.0, 121.0], [849.0, 122.0], [877.0, 122.0], [869.0, 124.0], [890.0, 122.0], [905.0, 122.0], [902.0, 122.0], [932.0, 122.0], [945.0, 120.0], [973.0, 122.0], [985.0, 122.0], [982.0, 125.0], [967.0, 122.0], [975.0, 120.0], [1004.0, 121.0], [1054.0, 121.0], [1060.0, 122.0], [1035.0, 121.0], [1031.0, 120.0], [1094.0, 120.0], [1095.0, 121.0], [1118.0, 122.0], [1168.0, 122.0], [1197.0, 121.0], [1193.0, 121.0], [1157.0, 121.0], [1156.0, 121.0], [1220.0, 121.0], [1278.0, 121.0], [1256.0, 123.0], [1235.0, 122.0], [1233.0, 121.0], [1230.0, 121.0], [1240.0, 121.0], [1268.0, 121.0], [1281.0, 120.0], [1331.0, 122.0], [1314.0, 120.0], [1293.0, 121.0], [1304.0, 121.0], [1383.0, 122.0], [1407.0, 122.0], [1349.0, 125.0], [1392.0, 130.0], [1406.0, 121.0], [1359.0, 121.0], [1375.0, 121.0], [1440.0, 122.0], [1459.0, 123.0], [1477.0, 121.0], [1496.0, 123.0], [1485.0, 125.0], [1493.0, 129.0], [1578.0, 121.0], [1593.0, 160.0], [1599.0, 121.0], [1562.0, 122.0], [1615.0, 125.0], [1646.0, 125.0], [1670.0, 121.0], [1665.0, 121.0], [1666.0, 187.0], [1784.0, 204.0], [1765.0, 120.0], [1746.0, 123.0], [1761.0, 120.0], [1737.0, 124.0], [1786.0, 123.0], [1739.0, 254.0], [1759.0, 260.0], [1776.0, 120.0], [1849.0, 121.0], [1848.0, 125.0], [1801.0, 157.0], [1829.0, 139.0], [1854.0, 121.0], [1805.0, 121.0], [1907.0, 122.0], [1862.0, 123.0], [1910.0, 130.0], [1882.0, 139.0], [1905.0, 176.0], [1884.0, 263.0], [1952.0, 121.0], [1955.0, 238.0], [1997.0, 122.0], [2001.0, 122.0], [1991.0, 130.0], [2031.0, 169.0], [2070.0, 121.0], [2100.0, 121.0], [2128.0, 142.0], [2086.0, 168.0], [2090.0, 126.0], [2080.0, 193.0], [2076.0, 187.0], [2288.0, 122.0], [2268.0, 132.0], [2298.0, 140.0], [2284.0, 191.0], [2212.0, 198.0], [2290.0, 160.0], [2384.0, 161.0], [2394.0, 130.0], [2400.0, 164.0], [2414.0, 162.0], [2406.0, 122.0], [2390.0, 201.0], [2312.0, 200.0], [2502.0, 121.0], [2538.0, 121.0], [2504.0, 131.0], [2518.0, 126.0], [2512.0, 162.0], [2456.0, 126.0], [2550.0, 131.0], [2548.0, 165.0], [2442.0, 147.0], [2434.0, 162.0], [2648.0, 121.0], [2626.0, 123.0], [2618.0, 137.0], [2776.0, 139.0], [2758.0, 165.0], [2788.0, 183.0], [2710.0, 121.0], [2898.0, 121.0], [2824.0, 124.0], [2904.0, 138.0], [2822.0, 161.0], [3056.0, 147.0], [3152.0, 123.0], [3080.0, 144.0], [2167.0, 121.0], [2107.0, 122.0], [2129.0, 122.0], [2085.0, 122.0], [2159.0, 148.0], [2091.0, 178.5], [2173.0, 202.0], [2237.0, 121.0], [2249.0, 144.0], [2219.0, 200.0], [2227.0, 121.0], [2347.0, 122.0], [2401.0, 121.0], [2345.0, 121.0], [2373.0, 182.0], [2423.0, 196.0], [2371.0, 125.0], [2335.0, 198.0], [2329.0, 177.0], [2475.0, 164.0], [2481.0, 123.0], [2469.0, 154.0], [2467.0, 182.0], [2473.0, 170.0], [2489.0, 123.0], [2521.0, 122.0], [2547.0, 160.0], [2433.0, 142.0], [2671.0, 125.0], [2561.0, 186.0], [2649.0, 189.0], [2569.0, 192.0], [2647.0, 161.0], [2713.0, 125.5], [2699.0, 161.0], [2811.0, 133.0], [2841.0, 144.0], [2831.0, 125.0], [2885.0, 129.0], [2933.0, 121.0], [2925.0, 144.0], [2871.0, 162.0], [2869.0, 157.0], [2849.0, 122.0], [3063.0, 123.0], [2951.0, 163.0], [3083.0, 121.0], [3081.0, 158.0], [3127.0, 135.0], [3249.0, 125.0], [3253.0, 121.0], [3467.0, 122.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3467.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 63478.0, "series": [{"data": [[2.0, 36442.0], [3.0, 49975.0], [4.0, 45445.0], [5.0, 57479.0], [6.0, 23424.0], [7.0, 44471.0], [8.0, 49482.0], [9.0, 39458.5], [10.0, 49493.5], [11.0, 49482.0], [12.0, 63478.0], [13.0, 45466.5], [14.0, 135.5], [21.0, 126.0], [24.0, 124.5], [32.0, 124.0], [36.0, 126.0], [40.0, 125.0], [45.0, 127.0], [46.0, 125.0], [52.0, 125.5], [57.0, 125.0], [62.0, 125.0], [64.0, 125.0], [73.0, 131.0], [75.0, 130.0], [74.0, 126.0], [77.0, 125.0], [81.0, 125.0], [87.0, 128.0], [89.0, 130.0], [95.0, 125.0], [102.0, 126.0], [101.0, 126.0], [110.0, 125.0], [115.0, 125.0], [119.0, 125.0], [127.0, 125.0], [125.0, 125.0], [135.0, 126.0], [136.0, 126.0], [145.0, 126.0], [151.0, 125.0], [150.0, 131.0], [144.0, 127.0], [157.0, 125.0], [153.0, 133.0], [152.0, 130.0], [159.0, 131.0], [161.0, 124.0], [172.0, 129.5], [170.0, 127.0], [176.0, 128.0], [191.0, 128.0], [196.0, 129.0], [199.0, 124.0], [203.0, 126.0], [201.0, 126.0], [210.0, 125.0], [224.0, 129.0], [235.0, 125.0], [236.0, 126.0], [233.0, 126.0], [244.0, 125.0], [242.0, 127.0], [248.0, 125.0], [251.0, 125.0], [261.0, 125.0], [256.0, 125.0], [267.0, 129.0], [274.0, 124.0], [284.0, 123.0], [280.0, 127.0], [281.0, 126.0], [287.0, 128.0], [296.0, 124.0], [291.0, 126.0], [305.0, 124.0], [310.0, 125.0], [314.0, 125.0], [315.0, 125.0], [330.0, 128.0], [331.0, 127.0], [336.0, 125.0], [351.0, 124.0], [337.0, 126.0], [345.0, 128.0], [362.0, 124.0], [360.0, 127.0], [370.0, 124.0], [368.0, 125.0], [374.0, 126.0], [378.0, 126.0], [375.0, 126.0], [381.0, 124.0], [386.0, 125.0], [390.0, 125.0], [387.0, 128.5], [396.0, 124.0], [391.0, 125.0], [394.0, 123.0], [405.0, 126.0], [403.0, 125.0], [411.0, 127.5], [413.0, 124.0], [421.0, 130.0], [430.0, 125.0], [427.0, 128.0], [424.0, 129.0], [425.0, 126.0], [433.0, 126.0], [444.0, 124.0], [436.0, 126.0], [443.0, 125.0], [446.0, 125.0], [435.0, 123.0], [438.0, 126.0], [434.0, 125.0], [456.0, 127.0], [452.0, 123.0], [466.0, 126.0], [464.0, 126.0], [479.0, 127.0], [476.0, 125.0], [481.0, 129.0], [493.0, 125.0], [485.0, 126.5], [480.0, 126.0], [482.0, 128.0], [483.0, 125.0], [491.0, 126.0], [499.0, 124.0], [500.0, 123.0], [508.0, 126.5], [510.0, 128.0], [501.0, 124.0], [505.0, 134.0], [517.0, 125.0], [538.0, 124.0], [537.0, 125.0], [521.0, 126.0], [524.0, 127.0], [525.0, 127.0], [535.0, 130.0], [530.0, 132.5], [543.0, 133.0], [542.0, 130.0], [527.0, 127.0], [515.0, 128.0], [516.0, 128.0], [561.0, 125.0], [548.0, 128.0], [544.0, 126.0], [573.0, 126.0], [575.0, 125.0], [574.0, 127.0], [558.0, 126.0], [567.0, 126.0], [566.0, 132.5], [563.0, 125.0], [551.0, 130.0], [565.0, 129.0], [603.0, 125.0], [591.0, 128.0], [604.0, 129.5], [587.0, 127.5], [584.0, 127.0], [588.0, 129.0], [607.0, 133.0], [599.0, 128.0], [598.0, 127.0], [594.0, 124.5], [595.0, 127.0], [593.0, 125.0], [590.0, 127.0], [581.0, 124.0], [576.0, 124.0], [580.0, 127.0], [578.0, 127.0], [583.0, 123.0], [602.0, 123.0], [600.0, 125.0], [639.0, 129.0], [630.0, 130.0], [608.0, 127.0], [623.0, 124.0], [627.0, 125.0], [611.0, 126.0], [631.0, 123.5], [626.0, 125.0], [612.0, 125.0], [665.0, 169.0], [641.0, 129.0], [663.0, 124.0], [662.0, 129.0], [653.0, 127.0], [651.0, 130.5], [661.0, 127.0], [646.0, 128.0], [669.0, 126.0], [645.0, 124.0], [688.0, 124.5], [694.0, 123.0], [681.0, 125.0], [691.0, 128.0], [700.0, 130.0], [675.0, 138.5], [687.0, 146.0], [682.0, 123.0], [695.0, 130.0], [697.0, 128.0], [719.0, 126.0], [709.0, 138.0], [710.0, 138.0], [718.0, 126.0], [717.0, 131.0], [715.0, 126.0], [713.0, 134.0], [716.0, 130.0], [730.0, 125.0], [733.0, 126.0], [731.0, 124.0], [734.0, 126.0], [727.0, 131.0], [705.0, 132.0], [704.0, 133.0], [763.0, 129.5], [748.0, 125.5], [746.0, 129.0], [743.0, 131.0], [740.0, 132.0], [766.0, 130.0], [745.0, 129.0], [765.0, 129.0], [764.0, 129.0], [761.0, 131.0], [762.0, 127.0], [757.0, 133.0], [758.0, 132.0], [752.0, 130.0], [795.0, 127.0], [785.0, 126.0], [770.0, 126.0], [782.0, 126.5], [792.0, 127.0], [775.0, 131.0], [772.0, 129.0], [771.0, 130.0], [773.0, 128.0], [774.0, 128.0], [793.0, 127.0], [794.0, 129.0], [797.0, 128.0], [796.0, 124.0], [787.0, 125.0], [789.0, 127.0], [788.0, 127.0], [786.0, 128.0], [790.0, 125.0], [791.0, 128.0], [784.0, 128.0], [799.0, 126.0], [798.0, 127.5], [783.0, 129.0], [768.0, 130.0], [769.0, 126.0], [776.0, 132.0], [777.0, 128.0], [780.0, 127.0], [779.0, 127.0], [778.0, 128.5], [801.0, 127.0], [831.0, 124.0], [811.0, 124.0], [812.0, 127.5], [827.0, 124.0], [830.0, 124.0], [829.0, 126.0], [802.0, 125.0], [804.0, 124.0], [826.0, 124.0], [825.0, 125.0], [807.0, 127.0], [806.0, 125.0], [805.0, 125.0], [809.0, 125.0], [808.0, 126.0], [810.0, 125.0], [813.0, 126.0], [818.0, 126.0], [816.0, 127.0], [817.0, 128.5], [821.0, 125.0], [822.0, 127.0], [820.0, 129.0], [819.0, 127.0], [800.0, 123.0], [815.0, 131.0], [814.0, 125.0], [851.0, 125.0], [838.0, 123.0], [843.0, 123.5], [832.0, 123.0], [835.0, 125.5], [849.0, 136.0], [877.0, 128.0], [869.0, 133.0], [890.0, 128.0], [905.0, 124.0], [902.0, 126.0], [932.0, 128.0], [945.0, 129.0], [973.0, 129.0], [985.0, 126.0], [982.0, 130.0], [967.0, 128.0], [975.0, 124.0], [1004.0, 128.0], [1054.0, 127.0], [1060.0, 128.0], [1035.0, 126.5], [1031.0, 123.0], [1094.0, 123.0], [1095.0, 125.0], [1118.0, 126.0], [1168.0, 126.0], [1197.0, 126.0], [1193.0, 126.0], [1157.0, 132.0], [1156.0, 124.0], [1220.0, 127.5], [1278.0, 125.0], [1256.0, 132.0], [1235.0, 130.0], [1233.0, 128.0], [1230.0, 124.0], [1240.0, 127.0], [1268.0, 126.0], [1281.0, 125.0], [1331.0, 128.0], [1314.0, 125.0], [1293.0, 128.0], [1304.0, 171.0], [1383.0, 128.0], [1407.0, 124.0], [1349.0, 135.0], [1392.0, 159.0], [1406.0, 125.5], [1359.0, 131.0], [1375.0, 126.0], [1440.0, 132.0], [1459.0, 140.0], [1477.0, 127.0], [1496.0, 132.0], [1485.0, 129.0], [1493.0, 149.0], [1578.0, 125.0], [1593.0, 256.0], [1599.0, 130.0], [1562.0, 126.0], [1615.0, 139.0], [1646.0, 134.0], [1670.0, 124.0], [1665.0, 128.0], [1666.0, 359.0], [1784.0, 322.0], [1765.0, 125.0], [1746.0, 130.0], [1761.0, 123.0], [1737.0, 133.5], [1786.0, 129.0], [1739.0, 381.0], [1759.0, 392.0], [1776.0, 126.0], [1849.0, 125.5], [1848.0, 138.0], [1801.0, 259.0], [1829.0, 201.5], [1854.0, 129.5], [1805.0, 125.0], [1907.0, 127.0], [1862.0, 134.0], [1910.0, 156.0], [1882.0, 199.0], [1905.0, 275.0], [1884.0, 387.0], [1952.0, 133.0], [1955.0, 385.0], [1997.0, 129.0], [2001.0, 126.5], [1991.0, 149.0], [2031.0, 279.0], [2100.0, 134.0], [2128.0, 223.0], [2086.0, 286.0], [2076.0, 237.0], [2080.0, 341.0], [2090.0, 147.0], [2288.0, 148.0], [2268.0, 155.5], [2298.0, 179.5], [2284.0, 253.0], [2212.0, 311.0], [2290.0, 261.0], [2394.0, 158.0], [2400.0, 230.0], [2384.0, 203.0], [2414.0, 258.0], [2390.0, 319.5], [2312.0, 305.0], [2406.0, 138.5], [2502.0, 128.0], [2538.0, 130.0], [2504.0, 187.0], [2518.0, 155.0], [2512.0, 247.0], [2456.0, 140.0], [2550.0, 162.0], [2548.0, 299.0], [2442.0, 206.5], [2434.0, 257.0], [2648.0, 127.0], [2626.0, 141.0], [2618.0, 179.5], [2776.0, 194.0], [2758.0, 261.5], [2788.0, 281.0], [2710.0, 132.0], [2824.0, 134.0], [2904.0, 210.0], [2822.0, 211.0], [3056.0, 206.0], [3152.0, 150.0], [3080.0, 266.5], [2107.0, 134.0], [2167.0, 127.0], [2159.0, 203.0], [2091.0, 293.0], [2173.0, 315.0], [2129.0, 129.0], [2085.0, 134.5], [2237.0, 127.5], [2249.0, 231.5], [2219.0, 385.5], [2227.0, 130.0], [2347.0, 130.0], [2401.0, 128.0], [2345.0, 128.0], [2373.0, 287.0], [2371.0, 146.0], [2423.0, 290.5], [2335.0, 291.0], [2329.0, 305.0], [2475.0, 243.5], [2481.0, 135.0], [2469.0, 244.0], [2467.0, 346.0], [2473.0, 304.0], [2489.0, 132.0], [2547.0, 244.0], [2521.0, 127.5], [2433.0, 205.0], [2671.0, 141.0], [2561.0, 293.0], [2649.0, 307.0], [2569.0, 302.0], [2647.0, 258.0], [2713.0, 192.0], [2699.0, 247.0], [2811.0, 200.0], [2841.0, 266.5], [2933.0, 127.0], [2885.0, 177.0], [2831.0, 212.0], [2925.0, 211.0], [2871.0, 231.0], [2869.0, 192.0], [2849.0, 130.0], [3063.0, 140.0], [2951.0, 201.0], [3083.0, 127.0], [3081.0, 246.5], [3127.0, 258.0], [3249.0, 170.0], [3253.0, 143.0], [3467.0, 148.0], [1.0, 57483.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [3.0, 0.0], [5.0, 0.0], [7.0, 0.0], [8.0, 0.0], [9.0, 0.0], [10.0, 0.0], [11.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 22410.0], [62.0, 121.0], [73.0, 126.5], [75.0, 129.5], [77.0, 124.0], [102.0, 124.0], [101.0, 123.0], [110.0, 123.0], [115.0, 123.0], [119.0, 121.5], [127.0, 121.0], [125.0, 121.0], [135.0, 123.5], [136.0, 123.0], [145.0, 123.5], [151.0, 122.0], [150.0, 124.0], [157.0, 122.5], [153.0, 126.0], [152.0, 126.0], [159.0, 128.5], [161.0, 123.0], [172.0, 125.0], [170.0, 123.0], [176.0, 125.0], [191.0, 123.0], [196.0, 124.0], [199.0, 124.5], [203.0, 123.0], [201.0, 122.0], [210.0, 122.0], [224.0, 123.0], [235.0, 122.0], [236.0, 122.0], [233.0, 123.0], [244.0, 122.0], [242.0, 123.5], [248.0, 123.0], [251.0, 122.0], [261.0, 121.0], [256.0, 121.0], [267.0, 125.0], [274.0, 121.0], [284.0, 121.0], [280.0, 123.0], [281.0, 122.5], [287.0, 124.0], [296.0, 122.0], [291.0, 122.0], [305.0, 121.0], [310.0, 122.0], [314.0, 123.0], [315.0, 122.0], [330.0, 122.0], [331.0, 122.0], [336.0, 122.0], [351.0, 121.0], [337.0, 123.0], [345.0, 123.0], [362.0, 122.0], [360.0, 123.0], [370.0, 121.0], [368.0, 122.0], [374.0, 121.0], [378.0, 122.0], [375.0, 122.0], [381.0, 121.0], [386.0, 121.0], [390.0, 121.0], [387.0, 123.0], [396.0, 121.0], [391.0, 120.0], [394.0, 120.0], [405.0, 122.0], [403.0, 122.0], [411.0, 122.0], [413.0, 121.0], [421.0, 122.0], [430.0, 122.0], [427.0, 123.0], [424.0, 123.0], [425.0, 121.0], [433.0, 122.0], [444.0, 122.0], [436.0, 122.0], [443.0, 122.0], [446.0, 122.0], [435.0, 120.0], [438.0, 121.0], [434.0, 122.0], [456.0, 122.0], [452.0, 121.0], [466.0, 123.0], [464.0, 121.0], [479.0, 122.0], [476.0, 120.0], [481.0, 122.0], [493.0, 123.0], [485.0, 123.0], [480.0, 122.0], [482.0, 122.0], [483.0, 120.0], [491.0, 120.0], [499.0, 120.0], [500.0, 121.0], [508.0, 122.0], [510.0, 122.0], [501.0, 120.0], [505.0, 123.0], [517.0, 122.0], [538.0, 122.0], [537.0, 121.0], [521.0, 122.0], [524.0, 122.0], [525.0, 123.0], [535.0, 124.0], [530.0, 124.0], [543.0, 124.5], [542.0, 120.0], [527.0, 121.0], [515.0, 123.0], [516.0, 122.0], [561.0, 122.0], [548.0, 122.0], [544.0, 122.0], [573.0, 121.0], [575.0, 121.0], [574.0, 122.0], [558.0, 122.0], [567.0, 123.0], [566.0, 122.0], [563.0, 120.0], [551.0, 123.0], [565.0, 123.0], [603.0, 121.0], [591.0, 122.0], [604.0, 122.0], [587.0, 120.0], [584.0, 121.0], [588.0, 121.0], [607.0, 124.0], [599.0, 123.0], [598.0, 120.0], [594.0, 121.0], [595.0, 121.0], [593.0, 121.0], [590.0, 121.0], [581.0, 121.0], [576.0, 121.0], [580.0, 123.0], [578.0, 121.0], [583.0, 120.0], [602.0, 122.0], [600.0, 122.0], [634.0, 121.0], [630.0, 121.0], [608.0, 122.0], [623.0, 122.0], [627.0, 122.0], [611.0, 121.0], [612.0, 121.0], [639.0, 122.0], [635.0, 121.0], [631.0, 120.0], [626.0, 122.0], [665.0, 147.0], [641.0, 123.0], [663.0, 121.0], [662.0, 122.0], [653.0, 121.0], [651.0, 122.0], [661.0, 123.0], [646.0, 123.0], [669.0, 121.0], [645.0, 122.0], [688.0, 121.0], [694.0, 121.0], [681.0, 122.0], [691.0, 121.0], [700.0, 123.0], [675.0, 131.0], [687.0, 126.0], [682.0, 121.0], [695.0, 122.0], [697.0, 122.0], [719.0, 123.0], [709.0, 124.0], [710.0, 125.5], [718.0, 121.0], [717.0, 122.0], [715.0, 122.0], [713.0, 127.0], [716.0, 123.0], [730.0, 122.0], [733.0, 122.0], [731.0, 120.0], [734.0, 121.0], [727.0, 124.0], [705.0, 125.0], [704.0, 124.0], [763.0, 123.0], [748.0, 121.0], [746.0, 123.0], [743.0, 122.0], [740.0, 123.0], [766.0, 125.0], [745.0, 124.0], [765.0, 123.0], [764.0, 123.0], [761.0, 122.0], [762.0, 122.0], [757.0, 124.0], [758.0, 123.0], [752.0, 123.0], [795.0, 122.0], [785.0, 120.0], [770.0, 120.0], [782.0, 121.0], [792.0, 122.0], [775.0, 127.0], [772.0, 122.0], [771.0, 123.0], [773.0, 123.0], [774.0, 122.0], [793.0, 122.0], [794.0, 121.0], [797.0, 122.0], [796.0, 120.0], [787.0, 122.0], [789.0, 122.0], [788.0, 122.0], [786.0, 122.0], [790.0, 122.0], [791.0, 121.0], [784.0, 122.0], [799.0, 121.0], [798.0, 121.0], [783.0, 123.0], [768.0, 124.0], [769.0, 122.0], [776.0, 124.0], [777.0, 122.0], [780.0, 121.0], [779.0, 121.0], [778.0, 122.0], [801.0, 122.0], [831.0, 121.0], [811.0, 120.0], [812.0, 120.0], [827.0, 120.0], [830.0, 121.0], [829.0, 121.0], [802.0, 121.0], [804.0, 121.0], [826.0, 121.0], [825.0, 120.0], [807.0, 122.0], [806.0, 121.0], [805.0, 121.0], [809.0, 122.0], [808.0, 121.0], [810.0, 121.0], [813.0, 120.0], [818.0, 121.0], [816.0, 121.0], [817.0, 122.0], [821.0, 122.0], [822.0, 122.0], [820.0, 121.0], [819.0, 121.0], [800.0, 121.0], [815.0, 122.0], [814.0, 121.0], [851.0, 120.0], [838.0, 121.0], [843.0, 120.0], [832.0, 121.0], [835.0, 121.0], [849.0, 122.0], [877.0, 122.0], [869.0, 124.0], [890.0, 122.0], [905.0, 122.0], [902.0, 122.0], [932.0, 122.0], [945.0, 120.0], [973.0, 122.0], [985.0, 122.0], [982.0, 125.0], [967.0, 122.0], [975.0, 120.0], [1004.0, 121.0], [1054.0, 121.0], [1060.0, 122.0], [1035.0, 121.0], [1031.0, 120.0], [1094.0, 120.0], [1095.0, 121.0], [1118.0, 122.0], [1168.0, 122.0], [1197.0, 121.0], [1193.0, 121.0], [1157.0, 121.0], [1156.0, 121.0], [1220.0, 121.0], [1278.0, 121.0], [1256.0, 123.0], [1235.0, 122.0], [1233.0, 121.0], [1230.0, 121.0], [1240.0, 121.0], [1268.0, 121.0], [1281.0, 120.0], [1331.0, 122.0], [1314.0, 120.0], [1293.0, 121.0], [1304.0, 121.0], [1383.0, 122.0], [1407.0, 122.0], [1349.0, 125.0], [1392.0, 130.0], [1406.0, 121.0], [1359.0, 121.0], [1375.0, 121.0], [1440.0, 122.0], [1459.0, 123.0], [1477.0, 121.0], [1496.0, 123.0], [1485.0, 125.0], [1493.0, 129.0], [1578.0, 121.0], [1593.0, 160.0], [1599.0, 121.0], [1562.0, 122.0], [1615.0, 125.0], [1646.0, 125.0], [1670.0, 121.0], [1665.0, 121.0], [1666.0, 187.0], [1784.0, 204.0], [1765.0, 120.0], [1746.0, 123.0], [1761.0, 120.0], [1737.0, 124.0], [1786.0, 123.0], [1739.0, 254.0], [1759.0, 260.0], [1776.0, 120.0], [1849.0, 121.0], [1848.0, 125.0], [1801.0, 157.0], [1829.0, 139.0], [1854.0, 121.0], [1805.0, 121.0], [1907.0, 122.0], [1862.0, 123.0], [1910.0, 130.0], [1882.0, 138.5], [1905.0, 176.0], [1884.0, 263.0], [1952.0, 121.0], [1955.0, 238.0], [1997.0, 122.0], [2001.0, 122.0], [1991.0, 130.0], [2031.0, 169.0], [2070.0, 121.0], [2100.0, 121.0], [2128.0, 142.0], [2086.0, 168.0], [2090.0, 126.0], [2080.0, 193.0], [2076.0, 187.0], [2288.0, 122.0], [2268.0, 132.0], [2298.0, 140.0], [2284.0, 191.0], [2212.0, 198.0], [2290.0, 160.0], [2384.0, 161.0], [2394.0, 130.0], [2400.0, 164.0], [2414.0, 162.0], [2406.0, 122.0], [2390.0, 201.0], [2312.0, 200.0], [2502.0, 121.0], [2538.0, 121.0], [2504.0, 131.0], [2518.0, 126.0], [2512.0, 162.0], [2456.0, 126.0], [2550.0, 131.0], [2548.0, 165.0], [2442.0, 147.0], [2434.0, 162.0], [2648.0, 121.0], [2626.0, 123.0], [2618.0, 137.0], [2776.0, 138.0], [2758.0, 165.0], [2788.0, 183.0], [2710.0, 121.0], [2898.0, 121.0], [2824.0, 124.0], [2904.0, 138.0], [2822.0, 161.0], [3056.0, 147.0], [3152.0, 123.0], [3080.0, 144.0], [2167.0, 121.0], [2107.0, 122.0], [2129.0, 122.0], [2085.0, 122.0], [2159.0, 148.0], [2091.0, 178.5], [2173.0, 202.0], [2237.0, 121.0], [2249.0, 144.0], [2219.0, 200.0], [2227.0, 121.0], [2347.0, 122.0], [2401.0, 121.0], [2345.0, 121.0], [2373.0, 182.0], [2423.0, 196.0], [2371.0, 125.0], [2335.0, 198.0], [2329.0, 177.0], [2475.0, 164.0], [2481.0, 123.0], [2469.0, 154.0], [2467.0, 182.0], [2473.0, 170.0], [2489.0, 123.0], [2521.0, 122.0], [2547.0, 160.0], [2433.0, 142.0], [2671.0, 125.0], [2561.0, 186.0], [2649.0, 189.0], [2569.0, 192.0], [2647.0, 161.0], [2713.0, 125.5], [2699.0, 161.0], [2811.0, 133.0], [2841.0, 144.0], [2831.0, 125.0], [2885.0, 129.0], [2933.0, 121.0], [2925.0, 144.0], [2871.0, 162.0], [2869.0, 157.0], [2849.0, 122.0], [3063.0, 123.0], [2951.0, 163.0], [3083.0, 121.0], [3081.0, 158.0], [3127.0, 135.0], [3249.0, 125.0], [3253.0, 121.0], [3467.0, 122.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3467.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 53.46666666666667, "minX": 1.75028274E12, "maxY": 2549.15, "series": [{"data": [[1.75028328E12, 542.4833333333333], [1.75028292E12, 789.1833333333333], [1.75028346E12, 1498.6666666666667], [1.75028274E12, 53.46666666666667], [1.75028304E12, 327.28333333333336], [1.75028334E12, 2026.5166666666667], [1.75028286E12, 659.1333333333333], [1.75028352E12, 652.15], [1.75028298E12, 785.9166666666666], [1.7502834E12, 2549.15], [1.7502828E12, 342.4], [1.75028358E12, 200.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75028358E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.3666666666666667, "minX": 1.75028274E12, "maxY": 2448.1666666666665, "series": [{"data": [[1.75028328E12, 86.76666666666667], [1.75028292E12, 96.88333333333334], [1.75028346E12, 98.45], [1.75028274E12, 38.766666666666666], [1.75028304E12, 38.36666666666667], [1.75028334E12, 100.56666666666666], [1.75028286E12, 100.51666666666667], [1.75028352E12, 96.3], [1.75028298E12, 102.08333333333333], [1.7502834E12, 98.8], [1.7502828E12, 99.68333333333334], [1.75028358E12, 21.316666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75028352E12, 4.05], [1.75028358E12, 1.3666666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.75028328E12, 452.8833333333333], [1.75028292E12, 692.3], [1.75028346E12, 1400.2166666666667], [1.75028274E12, 14.3], [1.75028304E12, 290.5833333333333], [1.75028334E12, 1922.6333333333334], [1.75028286E12, 558.0166666666667], [1.75028352E12, 551.8], [1.75028298E12, 683.8333333333334], [1.7502834E12, 2448.1666666666665], [1.7502828E12, 242.05], [1.75028358E12, 186.15]], "isOverall": false, "label": "429", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75028358E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 14.3, "minX": 1.75028274E12, "maxY": 2448.1666666666665, "series": [{"data": [[1.75028328E12, 86.76666666666667], [1.75028292E12, 96.88333333333334], [1.75028346E12, 98.45], [1.75028274E12, 38.766666666666666], [1.75028304E12, 38.36666666666667], [1.75028334E12, 100.56666666666666], [1.75028286E12, 100.51666666666667], [1.75028352E12, 96.3], [1.75028298E12, 102.08333333333333], [1.7502834E12, 98.8], [1.7502828E12, 99.68333333333334], [1.75028358E12, 21.316666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.75028328E12, 452.8833333333333], [1.75028292E12, 692.3], [1.75028346E12, 1400.2166666666667], [1.75028274E12, 14.3], [1.75028304E12, 290.5833333333333], [1.75028334E12, 1922.6333333333334], [1.75028286E12, 558.0166666666667], [1.75028352E12, 555.85], [1.75028298E12, 683.8333333333334], [1.7502834E12, 2448.1666666666665], [1.7502828E12, 242.05], [1.75028358E12, 187.51666666666668]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75028358E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 14.3, "minX": 1.75028274E12, "maxY": 2448.1666666666665, "series": [{"data": [[1.75028328E12, 86.76666666666667], [1.75028292E12, 96.88333333333334], [1.75028346E12, 98.45], [1.75028274E12, 38.766666666666666], [1.75028304E12, 38.36666666666667], [1.75028334E12, 100.56666666666666], [1.75028286E12, 100.51666666666667], [1.75028352E12, 96.3], [1.75028298E12, 102.08333333333333], [1.7502834E12, 98.8], [1.7502828E12, 99.68333333333334], [1.75028358E12, 21.316666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75028328E12, 452.8833333333333], [1.75028292E12, 692.3], [1.75028346E12, 1400.2166666666667], [1.75028274E12, 14.3], [1.75028304E12, 290.5833333333333], [1.75028334E12, 1922.6333333333334], [1.75028286E12, 558.0166666666667], [1.75028352E12, 555.85], [1.75028298E12, 683.8333333333334], [1.7502834E12, 2448.1666666666665], [1.7502828E12, 242.05], [1.75028358E12, 187.51666666666668]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75028358E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

